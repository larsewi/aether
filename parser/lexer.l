%{
#include "parser_state.h"

#include "parser.h"  // Generated by 'yacc -d'

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include "../utils/alloc.h"
#include "../utils/logger.h"
#include "../utils/string_lib.h"

#define P PARSER_STATE
%}

%%
[ \t]+ {
    P.col += yyleng;
}

\n {
    P.line += 1;
}

#[^\n]* {
    P.line += 1;
}

[_a-zA-Z][_a-zA-Z0-9]* {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return IDENTIFIER;
}

none {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return NONE_LITERAL;
}

(true|false) {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return BOOLEAN_LITERAL;
}

\"(\\.|[^"\\])*\" {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return STRING_LITERAL;
}

(0|[1-9][0-9]*)\.[0-9]* {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return FLOAT_LITERAL;
}

(0|[1-9][0-9]*) {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return INTEGER_LITERAL;
}

\|\| {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return OR_OPER;
}

&& {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return AND_OPER;
}

== {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return EQ_OPER;
}

\<= {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return LE_OPER;
}

>= {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return GE_OPER;
}

!= {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return NE_OPER;
}

. {
    LOG_DEBUG("Found token '%s': Ln %d, Col %d", yytext, P.line, P.col);
    P.col += yyleng;
    return yytext[0];
}

%%

int yywrap() {
    return true;
}
